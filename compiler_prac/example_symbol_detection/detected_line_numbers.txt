1:	#include <iostream>
2:	#include <vector>
3:	#include <string>
4:	#include <iomanip>
5:	#include <algorithm>
6:	#include <ctime>
7:	#include <map>
8:	#include <vector>
9:	#include <set>
10:	#include <ext/pb_ds/assoc_container.hpp>
11:	#include <ext/pb_ds/tree_policy.hpp>
12:	using namespace std;
13:	using namespace __gnu_pbds;
14:	
15:	struct Account {
16:	    int accountNumber;
17:	    string holderName;
18:	    double balance;
19:	};
20:	
21:	// Function prototypes
22:	void displayMenu();
23:	void createAccount(vector<Account>& accounts);
24:	void deposit(vector<Account>& accounts);
25:	void withdraw(vector<Account>& accounts);
26:	void checkBalance(const vector<Account>& accounts);
27:	void deleteAccount(vector<Account>& accounts);
28:	void displayAllAccounts(const vector<Account>& accounts);
29:	bool validateAccountNumber(int accountNumber);
30:	
31:	// Function to display the menu
32:	void displayMenu() {
33:	    cout << "\n======== Bank Management System ========\n";
34:	    cout << "1. Create Account\n";
35:	    cout << "2. Deposit Money\n";
36:	    cout << "3. Withdraw Money\n";
37:	    cout << "4. Check Balance\n";
38:	    cout << "5. Delete Account\n";
39:	    cout << "6. Display All Accounts\n";
40:	    cout << "7. Exit\n";
41:	    cout << "========================================\n";
42:	    cout << "Enter your choice: ";
43:	}
44:	
45:	// Function to create a new account
46:	void createAccount(vector<Account>& accounts) {
47:	    Account acc;
48:	    cout << "\nEnter Account Number: ";
49:	    cin >> acc.accountNumber;
50:	
51:	    // Check for duplicate account number
52:	    for (const auto& account : accounts) {
53:	        if (account.accountNumber == acc.accountNumber) {
54:	            cout << "\nAccount number already exists. Try again.\n";
55:	            return;
56:	        }
57:	    }
58:	
59:	    cin.ignore(); // To clear newline from buffer
60:	    cout << "Enter Account Holder's Name: ";
61:	    getline(cin, acc.holderName);
62:	    cout << "Enter Initial Deposit: ";
63:	    cin >> acc.balance;
64:	
65:	    accounts.push_back(acc);
66:	    cout << "\nAccount created successfully!\n";
67:	}
68:	
69:	// Function to deposit money
70:	void deposit(vector<Account>& accounts) {
71:	    int accountNumber;
72:	    double amount;
73:	
74:	    cout << "\nEnter Account Number: ";
75:	    cin >> accountNumber;
76:	
77:	    for (auto& account : accounts) {
78:	        if (account.accountNumber == accountNumber) {
79:	            cout << "Enter Amount to Deposit: ";
80:	            cin >> amount;
81:	            if (amount <= 0) {
82:	                cout << "\nInvalid amount. Deposit failed.\n";
83:	                return;
84:	            }
85:	            account.balance += amount;
86:	            cout << "\nDeposit successful! New Balance: " << account.balance << '\n';
87:	            return;
88:	        }
89:	    }
90:	
91:	    cout << "\nAccount not found.\n";
92:	}
93:	
94:	// Function to withdraw money
95:	void withdraw(vector<Account>& accounts) {
96:	    int accountNumber;
97:	    double amount;
98:	
99:	    /*  this is a multiline comment.
100:	        this is a multiline comment.
101:	        this is a multiline comment.
102:	        this is a multiline comment.
103:	        this is a multiline comment.
104:	        this is a multiline comment.
105:	    */  
106:	
107:	    cout << "\nEnter Account Number: ";
108:	    cin >> accountNumber;
109:	
110:	    for (auto& account : accounts) {
111:	        if (account.accountNumber == accountNumber) {
112:	            cout << "Enter Amount to Withdraw: ";
113:	            cin >> amount;
114:	            if (amount > account.balance || amount <= 0) {
115:	                cout << "\nInvalid amount. Withdrawal failed.\n";
116:	                return;
117:	            }
118:	            account.balance -= amount;
119:	            cout << "\nWithdrawal successful! New Balance: " << account.balance << '\n';
120:	            return;
121:	        }
122:	    }
123:	
124:	    cout << "\nAccount not found.\n";
125:	}
126:	
127:	// Function to check account balance
128:	void checkBalance(const vector<Account>& accounts) {
129:	    int accountNumber;
130:	    cout << "\nEnter Account Number: ";
131:	    cin >> accountNumber;
132:	
133:	    for (const auto& account : accounts) {
134:	        if (account.accountNumber == accountNumber) {
135:	            cout << "\nAccount Holder: " << account.holderName
136:	                 << "\nBalance: " << account.balance << '\n';
137:	            return;
138:	        }
139:	    }
140:	
141:	    cout << "\nAccount not found.\n";
142:	}
143:	
144:	// Function to delete an account
145:	void deleteAccount(vector<Account>& accounts) {
146:	    int accountNumber;
147:	    cout << "\nEnter Account Number to Delete: ";
148:	    cin >> accountNumber;
149:	
150:	    for (auto it = accounts.begin(); it != accounts.end(); ++it) {
151:	        if (it->accountNumber == accountNumber) {
152:	            accounts.erase(it);
153:	            cout << "\nAccount deleted successfully!\n";
154:	            return;
155:	        }
156:	    }
157:	
158:	    cout << "\nAccount not found.\n";
159:	}
160:	
161:	// Function to display all accounts
162:	void displayAllAccounts(const vector<Account>& accounts) {
163:	    if (accounts.empty()) {
164:	        cout << "\nNo accounts found.\n";
165:	        return;
166:	    }
167:	
168:	    cout << "\n=== List of All Accounts ===\n";
169:	    cout << left << setw(15) << "Account No." << setw(20) << "Holder Name" << setw(10) << "Balance\n";
170:	    cout << "------------------------------------------\n";
171:	
172:	    for (const auto& account : accounts) {
173:	        cout << left << setw(15) << account.accountNumber
174:	             << setw(20) << account.holderName
175:	             << setw(10) << account.balance << '\n';
176:	    }
177:	}
178:	
179:	// Main program
180:	int main() {
181:	    vector<Account> accounts;
182:	    int choice;
183:	
184:	    while (true) {
185:	        displayMenu();
186:	        cin >> choice;
187:	
188:	        switch (choice) {
189:	        case 1:
190:	            createAccount(accounts);
191:	            break;
192:	        case 2:
193:	            deposit(accounts);
194:	            break;
195:	        case 3:
196:	            withdraw(accounts);
197:	            break;
198:	        case 4:
199:	            checkBalance(accounts);
200:	            break;
201:	        case 5:
202:	            deleteAccount(accounts);
203:	            break;
204:	        case 6:
205:	            displayAllAccounts(accounts);
206:	            break;
207:	        case 7:
208:	            cout << "\nThank you for using the Bank Management System. Goodbye!\n";
209:	            return 0;
210:	        default:
211:	            cout << "\nInvalid choice. Please try again.\n";
212:	        }
213:	    }
214:	
215:	    return 0;
216:	}