1:	#include <iostream>
2:	#include <vector>
3:	#include <string>
4:	#include <iomanip>
5:	#include <cstdlib>
6:	#include <ext/pb_ds/assoc_container.hpp> 
7:	#include <ext/pb_ds/tree_policy.hpp> 
8:	using namespace __gnu_pbds; 
9:	
10:	/*
11:	==========================================================
12:	                    Bank Management System
13:	==========================================================
14:	
15:	This program is a simple implementation of a bank account
16:	management system. It allows users to:
17:	- Create new accounts
18:	- Deposit and withdraw funds
19:	- Display account details
20:	- List all accounts
21:	==========================================================
22:	*/
23:	
24:	/*
25:	==========================================================
26:	                    INCLUDES AND UTILITIES
27:	==========================================================
28:	The following utility functions are defined:
29:	- clearConsole() to clear the console based on OS
30:	- displayMenu() for user interaction
31:	==========================================================
32:	*/
33:	
34:	// Utility function to clear the console
35:	void clearConsole() {
36:	#ifdef _WIN32
37:	    system("cls");
38:	#else
39:	    system("clear");
40:	#endif
41:	}
42:	
43:	/* 
44:	Class Declaration for Bank Account
45:	----------------------------------
46:	Contains:
47:	- Data Members: Account number, holder's name, balance
48:	- Member Functions:
49:	    - deposit(double)
50:	    - withdraw(double)
51:	    - displayAccountDetails()
52:	*/
53:	class BankAccount {
54:	private:
55:	    int accountNumber;                // Unique account number
56:	    std::string accountHolderName;    // Account holder's name
57:	    double balance;                   // Current balance in the account
58:	    std::string accountType;          // Account type (e.g., Savings, Checking)
59:	
60:	public:
61:	    // Constructor
62:	    BankAccount(int accNo, const std::string& name, double initialBalance, const std::string& type)
63:	        : accountNumber(accNo), accountHolderName(name), balance(initialBalance), accountType(type) {}
64:	
65:	    /*
66:	    =============================
67:	    Deposit Function
68:	    =============================
69:	    - Adds a specified amount to the account balance
70:	    - Checks for invalid deposits (<= 0)
71:	    */
72:	    void deposit(double amount) {
73:	        if (amount <= 0) {
74:	            std::cerr << "Error: Deposit amount must be positive.\n";
75:	            return;
76:	        }
77:	        balance += amount;
78:	        std::cout << "Deposited: " << amount << "\n";
79:	        std::cout << "Updated Balance: " << balance << "\n";
80:	    }
81:	
82:	    /*
83:	    =============================
84:	    Withdraw Function
85:	    =============================
86:	    - Deducts a specified amount from the account balance
87:	    - Validates sufficient balance before processing withdrawal
88:	    */
89:	    void withdraw(double amount) {
90:	        if (amount > balance) {
91:	            std::cerr << "Error: Insufficient balance.\n";
92:	            return;
93:	        }
94:	        balance -= amount;
95:	        std::cout << "Withdrew: " << amount << "\n";
96:	        std::cout << "Remaining Balance: " << balance << "\n";
97:	    }
98:	
99:	    // Displays account details
100:	    void displayAccountDetails() const {
101:	        std::cout << "\n==============================================\n";
102:	        std::cout << "Account Number: " << accountNumber << "\n";
103:	        std::cout << "Account Holder: " << accountHolderName << "\n";
104:	        std::cout << "Account Type: " << accountType << "\n";
105:	        std::cout << "Balance: " << std::fixed << std::setprecision(2) << balance << "\n";
106:	        std::cout << "==============================================\n";
107:	    }
108:	
109:	    int getAccountNumber() const { return accountNumber; }
110:	};
111:	
112:	// Display the main menu
113:	void displayMenu() {
114:	    /*
115:	    ========================================
116:	    Interactive Menu for User Choices
117:	    ========================================
118:	    Options include:
119:	    1. Create Account
120:	    2. Deposit Money
121:	    3. Withdraw Money
122:	    4. Display Account Details
123:	    5. List All Accounts
124:	    6. Exit
125:	    */
126:	    std::cout << "\n=======================================\n";
127:	    std::cout << "        Bank Management System         \n";
128:	    std::cout << "=======================================\n";
129:	    std::cout << "1. Create New Account\n";
130:	    std::cout << "2. Deposit Money\n";
131:	    std::cout << "3. Withdraw Money\n";
132:	    std::cout << "4. Display Account Details\n";
133:	    std::cout << "5. List All Accounts\n";
134:	    std::cout << "6. Exit\n";
135:	    std::cout << "=======================================\n";
136:	    std::cout << "Enter your choice: ";
137:	}
138:	
139:	BankAccount* findAccount(std::vector<BankAccount>& accounts, int accountNumber) {
140:	    /*
141:	    =========================================
142:	    Search Account Function
143:	    =========================================
144:	    Looks through a vector of BankAccount objects
145:	    to find an account with the given account number.
146:	    =========================================
147:	    */
148:	    for (auto& account : accounts) {
149:	        if (account.getAccountNumber() == accountNumber) {
150:	            return &account;
151:	        }
152:	    }
153:	    return nullptr;
154:	}
155:	
156:	// Function to list all accounts
157:	void listAllAccounts(const std::vector<BankAccount>& accounts) {
158:	    /*
159:	    ====================================================
160:	    Display List of All Accounts
161:	    ====================================================
162:	    Loops through each BankAccount object in the vector
163:	    and prints out its number and holder's name
164:	    ====================================================
165:	    */
166:	    if (accounts.empty()) {
167:	        std::cout << "No accounts available.\n";
168:	        return;
169:	    }
170:	    std::cout << "\nAll Bank Accounts:\n";
171:	    std::cout << "========================================\n";
172:	    for (const auto& account : accounts) {
173:	        std::cout << "Account Number: " << account.getAccountNumber() << "\n";
174:	        std::cout << "Account Holder: " << account.accountHolderName << "\n";
175:	        std::cout << "----------------------------------------\n";
176:	    }
177:	}
178:	
179:	int main() {
180:	    /*
181:	    =============================
182:	    Main Function Workflow
183:	    =============================
184:	    - Manages user interactions
185:	    - Loops until user decides to exit
186:	    =============================
187:	    */
188:	    std::vector<BankAccount> accounts;
189:	    int choice, accountNumber;
190:	    double amount;
191:	    std::string name, type;
192:	
193:	    do {
194:	        clearConsole();
195:	        displayMenu();
196:	        std::cin >> choice;
197:	        std::cin.ignore(); 
198:	
199:	        switch (choice) {
200:	        case 1: // Create a new account
201:	            /*
202:	            ------------------------------------
203:	            Prompt user for new account details:
204:	            - Account Number
205:	            - Holder's Name
206:	            - Initial Balance
207:	            - Account Type
208:	            ------------------------------------
209:	            */
210:	            std::cout << "Enter Account Number: ";
211:	            std::cin >> accountNumber;
212:	            std::cin.ignore();
213:	            std::cout << "Enter Account Holder's Name: ";
214:	            std::getline(std::cin, name);
215:	            std::cout << "Enter Account Type (Savings/Checking): ";
216:	            std::getline(std::cin, type);
217:	            std::cout << "Enter Initial Balance: ";
218:	            std::cin >> amount;
219:	
220:	            // Add new account to the list
221:	            accounts.emplace_back(accountNumber, name, amount, type);
222:	            std::cout << "Account created successfully!\n";
223:	            break;
224:	
225:	        case 2: // Deposit money
226:	            std::cout << "Enter Account Number: ";
227:	            std::cin >> accountNumber;
228:	            {
229:	                BankAccount* account = findAccount(accounts, accountNumber);
230:	                if (account) {
231:	                    std::cout << "Enter Amount to Deposit: ";
232:	                    std::cin >> amount;
233:	                    account->deposit(amount);
234:	                } else {
235:	                    std::cerr << "Error: Account not found.\n";
236:	                }
237:	            }
238:	            break;
239:	
240:	        case 3: // Withdraw money
241:	            std::cout << "Enter Account Number: ";
242:	            std::cin >> accountNumber;
243:	            {
244:	                BankAccount* account = findAccount(accounts, accountNumber);
245:	                if (account) {
246:	                    std::cout << "Enter Amount to Withdraw: ";
247:	                    std::cin >> amount;
248:	                    account->withdraw(amount);
249:	                } else {
250:	                    std::cerr << "Error: Account not found.\n";
251:	                }
252:	            }
253:	            break;
254:	
255:	        case 4: // Display account details
256:	            std::cout << "Enter Account Number: ";
257:	            std::cin >> accountNumber;
258:	            {
259:	                BankAccount* account = findAccount(accounts, accountNumber);
260:	                if (account) {
261:	                    account->displayAccountDetails();
262:	                } else {
263:	                    std::cerr << "Error: Account not found.\n";
264:	                }
265:	            }
266:	            break;
267:	
268:	        case 5: // List all accounts
269:	            listAllAccounts(accounts);
270:	            break;
271:	
272:	        case 6: // Exit the program
273:	            std::cout << "Goodbye!\n";
274:	            break;
275:	
276:	        default:
277:	            std::cerr << "Invalid option. Try again.\n";
278:	        }
279:	        std::cout << "\nPress Enter to continue...";
280:	        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
281:	    } while (choice != 6);
282:	
283:	    return 0;
284:	}
285:	