1:	#include <iostream>
2:	#include <vector>
3:	#include <string>
4:	#include <iomanip>
5:	#include <cstdlib>
6:	#include <ext/pb_ds/assoc_container.hpp> 
7:	#include <ext/pb_ds/tree_policy.hpp> 
8:	using namespace __gnu_pbds; 
9:	
10:	/*
11:	==========================================================
12:	                    Bank Management System
13:	==========================================================
14:	
15:	This program is a simple implementation of a bank account
16:	management system. It allows users to:
17:	- Create new accounts
18:	- Deposit and withdraw funds
19:	- Display account details
20:	- List all accounts
21:	==========================================================
22:	*/
23:	
24:	/*
25:	==========================================================
26:	                    INCLUDES AND UTILITIES
27:	==========================================================
28:	The following utility functions are defined:
29:	- clearConsole() to clear the console based on OS
30:	- displayMenu() for user interaction
31:	==========================================================
32:	*/
33:	
34:	// Utility function to clear the console
35:	void clearConsole() {
36:	#ifdef _WIN32
37:	    system("cls");
38:	#else
39:	    system("clear");
40:	#endif
41:	}
42:	
43:	/* 
44:	Class Declaration for Bank Account
45:	----------------------------------
46:	Contains:
47:	- Data Members: Account number, holder's name, balance
48:	- Member Functions:
49:	    - deposit(double)
50:	    - withdraw(double)
51:	    - displayAccountDetails()
52:	*/
53:	class BankAccount {
54:	private:
55:	    int accountNumber;                // Unique account number
56:	    std::string accountHolderName;    // Account holder's name
57:	    double balance;                   // Current balance in the account
58:	    std::string accountType;          // Account type (e.g., Savings, Checking)
59:	
60:	public:
61:	    // Constructor
62:	    BankAccount(int accNo, const std::string& name, double initialBalance, const std::string& type)
63:	        : accountNumber(accNo), accountHolderName(name), balance(initialBalance), accountType(type) {}
64:	
65:	    /*
66:	    =============================
67:	    Deposit Function
68:	    =============================
69:	    - Adds a specified amount to the account balance
70:	    - Checks for invalid deposits (<= 0)
71:	    */
72:	    void deposit(double amount) {
73:	        if (amount <= 0) {
74:	            std::cerr << "Error: Deposit amount must be positive.\n";
75:	            return;
76:	        }
77:	        balance += amount;
78:	        std::cout << "Deposited: " << amount << "\n";
79:	        std::cout << "Updated Balance: " << balance << "\n";
80:	    }
81:	
82:	    /*
83:	    =============================
84:	    Withdraw Function
85:	    =============================
86:	    - Deducts a specified amount from the account balance
87:	    - Validates sufficient balance before processing withdrawal
88:	    */
89:	    void withdraw(double amount) {
90:	        if (amount > balance) {
91:	            std::cerr << "Error: Insufficient balance.\n";
92:	            return;
93:	        }
94:	        balance -= amount;
95:	        std::cout << "Withdrew: " << amount << "\n";
96:	        std::cout << "Remaining Balance: " << balance << "\n";
97:	    }
98:	
99:	    // Displays account details
100:	    void displayAccountDetails() const {
101:	        std::cout << "\n==============================================\n";
102:	        std::cout << "Account Number: " << accountNumber << "\n";
103:	        std::cout << "Account Holder: " << accountHolderName << "\n";
104:	        std::cout << "Account Type: " << accountType << "\n";
105:	        std::cout << "Balance: " << std::fixed << std::setprecision(2) << balance << "\n";
106:	        std::cout << "==============================================\n";
107:	    }
108:	
109:	    int getAccountNumber() const { return accountNumber; }
110:	    std::string getAccountHolderName() const { return accountHolderName; }
111:	};
112:	
113:	// Display the main menu
114:	void displayMenu() {
115:	    /*
116:	    ========================================
117:	    Interactive Menu for User Choices
118:	    ========================================
119:	    Options include:
120:	    1. Create Account
121:	    2. Deposit Money
122:	    3. Withdraw Money
123:	    4. Display Account Details
124:	    5. List All Accounts
125:	    6. Exit
126:	    */
127:	    std::cout << "\n=======================================\n";
128:	    std::cout << "        Bank Management System         \n";
129:	    std::cout << "=======================================\n";
130:	    std::cout << "1. Create New Account\n";
131:	    std::cout << "2. Deposit Money\n";
132:	    std::cout << "3. Withdraw Money\n";
133:	    std::cout << "4. Display Account Details\n";
134:	    std::cout << "5. List All Accounts\n";
135:	    std::cout << "6. Exit\n";
136:	    std::cout << "=======================================\n";
137:	    std::cout << "Enter your choice: ";
138:	}
139:	
140:	BankAccount* findAccount(std::vector<BankAccount>& accounts, int accountNumber) {
141:	    /*
142:	    =========================================
143:	    Search Account Function
144:	    =========================================
145:	    Looks through a vector of BankAccount objects
146:	    to find an account with the given account number.
147:	    =========================================
148:	    */
149:	    for (auto& account : accounts) {
150:	        if (account.getAccountNumber() == accountNumber) {
151:	            return &account;
152:	        }
153:	    }
154:	    return nullptr;
155:	}
156:	
157:	// Function to list all accounts
158:	void listAllAccounts(const std::vector<BankAccount>& accounts) {
159:	    /*
160:	    ====================================================
161:	    Display List of All Accounts
162:	    ====================================================
163:	    Loops through each BankAccount object in the vector
164:	    and prints out its number and holder's name
165:	    ====================================================
166:	    */
167:	    if (accounts.empty()) {
168:	        std::cout << "No accounts available.\n";
169:	        return;
170:	    }
171:	    std::cout << "\nAll Bank Accounts:\n";
172:	    std::cout << "========================================\n";
173:	    for (const auto& account : accounts) {
174:	        std::cout << "Account Number: " << account.getAccountNumber() << "\n";
175:	        std::cout << "Account Holder: " << account.getAccountHolderName() << "\n";
176:	        std::cout << "----------------------------------------\n";
177:	    }
178:	}
179:	
180:	int main() {
181:	    /*
182:	    =============================
183:	    Main Function Workflow
184:	    =============================
185:	    - Manages user interactions
186:	    - Loops until user decides to exit
187:	    =============================
188:	    */
189:	    std::vector<BankAccount> accounts;
190:	    int choice, accountNumber;
191:	    double amount;
192:	    std::string name, type;
193:	
194:	    do {
195:	        clearConsole();
196:	        displayMenu();
197:	        std::cin >> choice;
198:	        std::cin.ignore(); 
199:	
200:	        switch (choice) {
201:	        case 1: // Create a new account
202:	            /*
203:	            ------------------------------------
204:	            Prompt user for new account details:
205:	            - Account Number
206:	            - Holder's Name
207:	            - Initial Balance
208:	            - Account Type
209:	            ------------------------------------
210:	            */
211:	            std::cout << "Enter Account Number: ";
212:	            std::cin >> accountNumber;
213:	            std::cin.ignore();
214:	            std::cout << "Enter Account Holder's Name: ";
215:	            std::getline(std::cin, name);
216:	            std::cout << "Enter Account Type (Savings/Checking): ";
217:	            std::getline(std::cin, type);
218:	            std::cout << "Enter Initial Balance: ";
219:	            std::cin >> amount;
220:	
221:	            // Add new account to the list
222:	            accounts.emplace_back(accountNumber, name, amount, type);
223:	            std::cout << "Account created successfully!\n";
224:	            break;
225:	
226:	        case 2: // Deposit money
227:	            std::cout << "Enter Account Number: ";
228:	            std::cin >> accountNumber;
229:	            {
230:	                BankAccount* account = findAccount(accounts, accountNumber);
231:	                if (account) {
232:	                    std::cout << "Enter Amount to Deposit: ";
233:	                    std::cin >> amount;
234:	                    account->deposit(amount);
235:	                } else {
236:	                    std::cerr << "Error: Account not found.\n";
237:	                }
238:	            }
239:	            break;
240:	
241:	        case 3: // Withdraw money
242:	            std::cout << "Enter Account Number: ";
243:	            std::cin >> accountNumber;
244:	            {
245:	                BankAccount* account = findAccount(accounts, accountNumber);
246:	                if (account) {
247:	                    std::cout << "Enter Amount to Withdraw: ";
248:	                    std::cin >> amount;
249:	                    account->withdraw(amount);
250:	                } else {
251:	                    std::cerr << "Error: Account not found.\n";
252:	                }
253:	            }
254:	            break;
255:	
256:	        case 4: // Display account details
257:	            std::cout << "Enter Account Number: ";
258:	            std::cin >> accountNumber;
259:	            {
260:	                BankAccount* account = findAccount(accounts, accountNumber);
261:	                if (account) {
262:	                    account->displayAccountDetails();
263:	                } else {
264:	                    std::cerr << "Error: Account not found.\n";
265:	                }
266:	            }
267:	            break;
268:	
269:	        case 5: // List all accounts
270:	            listAllAccounts(accounts);
271:	            break;
272:	
273:	        case 6: // Exit the program
274:	            std::cout << "Goodbye!\n";
275:	            break;
276:	
277:	        default:
278:	            std::cerr << "Invalid option. Try again.\n";
279:	        }
280:	        std::cout << "\nPress Enter to continue...";
281:	        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
282:	    } while (choice != 6);
283:	
284:	    return 0;
285:	}
286:	